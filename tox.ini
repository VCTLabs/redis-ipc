[tox]
envlist = py3{6,7,8,9}-tests
skip_missing_interpreters = true
skipsdist = true

[testenv]
envdir = {toxinidir}/.env
skip_install = true

passenv =
    pythonLocation
    CI GITHUB*
    PIP_DOWNLOAD_CACHE

whitelist_externals =
    {tests,clang,bionic,lint,grind,clean}: bash
    {tests,clang,bionic,grind}: mkdir

changedir =
    {tests,clang,bionic,grind}: build

deps =
    {tests,clang,bionic,grind,lint}: pip>=19.0.1
    {tests,clang,bionic,grind}: cmake
    {tests,clang,bionic,cover}: gcovr
    lint: cpplint
    grind: ValgrindCI

commands_pre =
    {tests,clang,bionic,grind}: mkdir -p {toxinidir}/build
    {tests,clang,bionic,grind}: bash -c "../scripts/run_redis.sh start > /dev/null"
    {tests,clang,bionic,grind}: bash -c "../scripts/run_redis.sh status"

commands =
    bionic: bash -c "cmake -DWITH_COVERAGE=1 -DCMAKE_BUILD_TYPE=Debug -DGOOGLETEST_SRC_DIR=/usr/src/googletest .."
    clang: bash -c "cmake -DCMAKE_TOOLCHAIN_FILE=../clang_toolchain.cmake .."
    tests: bash -c "cmake -DWITH_COVERAGE=1 -DCMAKE_BUILD_TYPE=Debug .."
    grind: bash -c "cmake -DCMAKE_BUILD_TYPE=Debug .."
    {tests,clang,bionic,grind}: bash -c "cmake --build . -j $(nproc)"
    {tests,clang,bionic,grind}: bash -c "ctest -V --test-dir ./"
    lint: bash -c "cpplint --output=gsed {toxinidir}/src/* {toxinidir}/inc/*"
    {tests,clang,bionic}: gcovr -s -b -r {toxinidir} -e ../test/
    cover: gcovr -r {toxinidir} -e test/ --xml-pretty -o {toxinidir}/coverage.xml
    clean: bash -c 'rm -rf build/ coverage.xml'
    # runtime assertion error without || true =>  (SIGSEGV)) (exited with code -11)
    grind: bash -c "valgrind --tool=memcheck --xml=yes --xml-file=json_check.xml --leak-check=full --show-leak-kinds=definite,possible --error-exitcode=127 ./json_test || true"
    # valgrind error exit without || true =>  (exited with code 127)
    grind: bash -c "valgrind --tool=memcheck --xml=yes --xml-file=multithread_check.xml --leak-check=full --show-leak-kinds=definite,possible --error-exitcode=127 ./multithread_test || true"
    grind: bash -c "valgrind --tool=memcheck --xml=yes --xml-file=command_check.xml --leak-check=full --show-leak-kinds=definite,possible --error-exitcode=127 ./command_result_test"
    grind: bash -c "[[ -f json_check.xml ]] && valgrind-ci json_check.xml --number-of-errors"
    grind: bash -c "[[ -f json_check.xml ]] && valgrind-ci json_check.xml --summary"
    grind: valgrind-ci multithread_check.xml --number-of-errors
    grind: valgrind-ci multithread_check.xml --summary
    # xml exception (no errors in report) =>  junk after document element
    #grind: bash -c "[[ -f command_check.xml ]] && valgrind-ci command_check.xml --number-of-errors || true"
    #grind: bash -c "[[ -f command_check.xml ]] && valgrind-ci command_check.xml --summary || true"

commands_post =
    {tests,clang,bionic,grind}: bash -c "../scripts/run_redis.sh stop > /dev/null"
