[tox]
envlist = py3{6,7,8,9,10,11}-tests
skip_missing_interpreters = true
skipsdist = true

[testenv]
# uncomment next line to force older system python for local testing
#basepython = python3.8
install_command = pip install {opts} {packages}
skip_install = true

[testenv:{tests,clang,ctest,bionic,lcov,lint,grind,clean,cover}]
envdir = {toxworkdir}/build
runner = ignore_env_name_mismatch

passenv =
    pythonLocation
    CC
    CXX
    CI
    GITHUB*
    PIP_DOWNLOAD_CACHE

setenv =
    clang: CC = {env:CC:clang}
    clang: CXX = {env:CXX:clang++}
    clang: ENV_LLVM_VER = {env:ENV_LLVM_VER:15}
    bionic: ENV_RIPC_RUNTIME_DIR = {env:ENV_RIPC_RUNTIME_DIR:{envtmpdir}}

allowlist_externals =
    {tests,clang,ctest,bionic,lint,grind,clean}: bash
    {tests,clang,bionic,grind,cover}: mkdir

changedir =
    {tests,bionic,clang,grind}: build

deps =
    {tests,bionic,clang,ctest,grind,lcov,lint,cover}: pip>=21.0.1
    {tests,bionic,clang,ctest,grind,lcov,cover}: gcovr
    {tests,bionic,clang,ctest,grind,lcov,cover}: lcov_cobertura
    {tests,bionic,clang,ctest,grind,lcov,cover}: cmake
    {tests,bionic,clang,ctest,grind,lcov,cover}: ninja
    {tests,bionic,clang,ctest,grind,lcov,cover}: ValgrindCI
    lint: cpplint
    lint: beautysh

commands_pre =
    bionic: mkdir -p {toxinidir}/coverage
    {tests,clang,bionic,grind}: mkdir -p {toxinidir}/build
    {tests,clang,ctest,grind}: bash -c '{toxinidir}/scripts/run_redis.sh start > /dev/null'
    {tests,clang,ctest,grind}: bash -c '{toxinidir}/scripts/run_redis.sh status'

commands =
    bionic: bash -c 'cmake -G {posargs:"Unix Makefiles"} -DWITH_COVERAGE=1 -DCMAKE_BUILD_TYPE=Debug ..'
    bionic: bash -c 'cmake --build .'
    bionic: bash -c 'make cov || true'
    bionic: bash -c 'RIPC_RUNTIME_DIR=$ENV_RIPC_RUNTIME_DIR {toxinidir}/scripts/run_redis.sh start > /dev/null'
    bionic: bash -c 'RIPC_RUNTIME_DIR=$ENV_RIPC_RUNTIME_DIR {toxinidir}/scripts/run_redis.sh status'
    bionic: bash -c 'RIPC_SERVER_PATH=$ENV_RIPC_RUNTIME_DIR/socket make cov'
    clang: bash -c 'cmake -DRIPC_BUILD_TESTING=ON -DCOVERAGE_BUILD=ON -DCOVERAGE_HTML=ON -DLLVM_VER=$ENV_LLVM_VER ..'
    tests: bash -c 'cmake -DWITH_COVERAGE=1 -DCMAKE_BUILD_TYPE=Debug ..'
    grind: bash -c 'cmake -DRIPC_BUILD_TESTING=ON -DCMAKE_BUILD_TYPE=Debug ..'
    {tests,clang,grind}: bash -c 'cmake --build . -j $(nproc)'
    tests: bash -c 'ctest -V --test-dir ./'
    clang: bash -c 'cmake --build . --target coverage'
    lcov: lcov_cobertura build/coverage/lcov.info --base-dir {toxinidir} --output coverage.xml
    lint: bash -c 'cpplint --output=gsed {toxinidir}/src/* {toxinidir}/inc/*'
    {bionic,tests}: gcovr --gcov-ignore-parse-errors=negative_hits.warn -s -b -r {toxinidir} .
    bionic: gcovr -r {toxinidir} --xml-pretty -o coverage.xml .
    bionic: gcovr -r {toxinidir} --html --html-details -o {toxinidir}/coverage/coverage.html .
    {bionic}: bash -c 'RIPC_RUNTIME_DIR=$ENV_RIPC_RUNTIME_DIR {toxinidir}/scripts/run_redis.sh stop'
    ctest: bash -c 'ctest --build-generator {posargs:"Unix Makefiles"} --build-and-test . build --build-options -DWITH_COVERAGE=ON -DCMAKE_BUILD_TYPE=Debug --test-command ctest --rerun-failed --output-on-failure -V'
    ctest: gcovr --gcov-ignore-parse-errors=negative_hits.warn -s -b build/
    cover: gcovr --xml-pretty -o coverage.xml build/
    # runtime assertion error without || true =>  (SIGSEGV)) (exited with code -11)
    grind: bash -c 'valgrind --tool=memcheck --xml=yes --xml-file=json_check.xml --leak-check=full --show-leak-kinds=definite,possible --error-exitcode=127 ./json_test || true'
    # valgrind error exit without || true =>  (exited with code 127)
    grind: bash -c 'valgrind --tool=memcheck --xml=yes --xml-file=multithread_check.xml --leak-check=full --show-leak-kinds=definite,possible --error-exitcode=127 ./multithread_test || true'
    grind: bash -c 'valgrind --tool=memcheck --xml=yes --xml-file=command_check.xml --leak-check=full --show-leak-kinds=definite,possible --error-exitcode=127 ./command_result_test || true'
    grind: bash -c '[[ -f json_check.xml ]] && valgrind-ci json_check.xml --number-of-errors'
    grind: bash -c '[[ -f json_check.xml ]] && valgrind-ci json_check.xml --summary'
    grind: valgrind-ci multithread_check.xml --number-of-errors
    grind: valgrind-ci multithread_check.xml --summary
    # xml exception (no errors in report) =>  junk after document element
    #grind: bash -c '[[ -f command_check.xml ]] && valgrind-ci command_check.xml --number-of-errors || true'
    #grind: bash -c '[[ -f command_check.xml ]] && valgrind-ci command_check.xml --summary || true'
    clean: bash -c 'rm -rf build/ coverage/ coverage.xml *.gcov __pycache__/'

commands_post =
    {tests,clang,ctest,grind,dist}: bash -c '{toxinidir}/scripts/run_redis.sh stop > /dev/null'

[testenv:{auto,autoclean,dist}]
envdir = {toxworkdir}/auto
runner = ignore_env_name_mismatch

passenv =
    pythonLocation
    CC
    CXX
    CI
    GITHUB*
    PIP_DOWNLOAD_CACHE

setenv =
    auto: ENV_RIPC_RUNTIME_DIR = {env:ENV_RIPC_RUNTIME_DIR:{envtmpdir}}

allowlist_externals =
    {auto,autoclean,dist}: bash

deps =
    {auto,autoclean,dist}: pip>=21.0.1
    {auto,autoclean,dist}: this-cli
    {auto,autoclean,dist}: gcovr

commands_pre =
    {dist}: bash -c '{toxinidir}/scripts/run_redis.sh start > /dev/null'
    {dist}: bash -c '{toxinidir}/scripts/run_redis.sh status'

commands =
    # sadly this-cli cannot pass args to configure
    dist: this check
    dist: bash -c 'make clean'
    dist: bash -c 'make dist'
    auto: bash -c 'autoreconf -fiv'
    auto: bash -c './configure {posargs:"--with-coverage"}'
    auto: bash -c 'make cov || true'
    auto: bash -c 'RIPC_RUNTIME_DIR=$ENV_RIPC_RUNTIME_DIR {toxinidir}/scripts/run_redis.sh start > /dev/null'
    auto: bash -c 'RIPC_RUNTIME_DIR=$ENV_RIPC_RUNTIME_DIR {toxinidir}/scripts/run_redis.sh status'
    auto: bash -c 'RIPC_SERVER_PATH=$ENV_RIPC_RUNTIME_DIR/socket make cov'
    auto: gcovr --gcov-ignore-parse-errors=negative_hits.warn -s -b src/.libs/ test/
    auto: gcovr --gcov-ignore-parse-errors=negative_hits.warn --xml-pretty -o coverage.xml src/.libs/ test/
    auto: bash -c 'RIPC_RUNTIME_DIR=$ENV_RIPC_RUNTIME_DIR {toxinidir}/scripts/run_redis.sh stop'
    autoclean: bash -c 'make distclean-recursive'
    autoclean: bash -c 'rm -rf Makefile Makefile.in aclocal.m4 ar-lib autom4te.cache/ compile config.* coverage* configure configure~ depcomp install-sh libltdl/ ltmain.sh m4/ missing src/Makefile.in test-driver test/gmon.out test/Makefile.in'
