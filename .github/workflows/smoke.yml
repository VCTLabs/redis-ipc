name: smoke

on:
  workflow_dispatch:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]

    steps:
    - uses: actions/checkout@v2

    - name: Environment
      run: |
        bash -c set

    # we split the deps for ubunti json-c versions:
    #   bionic has json-c = 0.12 but focal
    #   has a broken 0.13 so we use 0.15 instead
    - name: Backports
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get -qq update
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository -y -s ppa:nerdboy/embedded
        sudo apt-get install -y libjson-c-dev

    - name: Upstream
      if: matrix.os == 'ubuntu-18.04'
      run: |
        sudo apt-get -qq update
        sudo apt-get install -y libjson-c-dev

    - name: Common dependencies
      run: |
        sudo apt-get install -y libhiredis-dev autoconf automake
        sudo apt-get install -y redis-server gcovr lcov

    - name: Configure
      run: |
        ./autogen.sh
        ./configure

    - name: Build
      run: make

    - name: Message bus
      run: |
        mkdir -p /tmp/redis-ipc
        redis-server --port 0 --pidfile /tmp/redis.pid --unixsocket /tmp/redis-ipc/socket --unixsocketperm 600 &

    - name: Test
      run: |
        make check

    - name: Generate coverage
      run: |
        ./configure --with-coverage
        make clean
        make cov

    - name: Display coverage bionic
      if: matrix.os == 'ubuntu-18.04'
      run: |
        gcovr -s -b -r src/

    - name: Display coverage
      if: matrix.os == 'ubuntu-20.04'
      run: |
        gcovr -s -b -r src/

    - name: Cleanup
      run: |
        cat /tmp/redis.pid | xargs kill

    - uses: actions/upload-artifact@v2
      with:
        name: coverage
        path: ./coverage

  check:
    name: Collect metrics
    runs-on: ubuntu-20.04
    needs: [build]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: sarnold/cccc-action@0.3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        source_dirs: src

    - uses: actions/upload-artifact@v2
      with:
        name: metrics
        path: ./metrics
