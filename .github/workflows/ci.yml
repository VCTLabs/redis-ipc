name: ci

on:
  workflow_dispatch:
  # pull_request:
  #push:
    #branches:
      #- master
    #paths-ignore:
      #- '**.md'
      #- '**.rst'
      #- '**.sh'

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:

        name: [ 
          # windows-2019-mingw,
          ubuntu-20.04-gcc,
          ubuntu-20.04-clang,
          macOS-10.15-clang,
          macOS-10.15-gcc
        ]

        include:
          #- name: windows-2019-mingw
            #os: windows-2019
            #compiler: mingw-w64

          - name: ubuntu-20.04-gcc
            os: ubuntu-20.04
            compiler: gcc
            version: "10"

          - name: ubuntu-20.04-clang
            os: ubuntu-20.04
            compiler: clang
            version: "10"

          - name: macOS-10.15-clang
            os: macOS-10.15
            compiler: xcode
            version: "12.2"

          - name: macOS-10.15-gcc
            os: macOS-10.15
            compiler: gcc
            version: "10"

    steps:
      - uses: actions/checkout@v2

      - name: Install and setup MSYS2 mingw
        if: runner.os == 'Windows' && matrix.compiler == 'mingw-w64'
        uses: msys2/setup-msys2@v2     
        with:
          msystem: MINGW64
          install: mingw-w64-x86_64-toolchain make gcc diffutils

      - name: Build and test windows mingw
        if: runner.os == 'Windows' &&  matrix.compiler == 'mingw-w64'
        shell: msys2 {0}
        run: |
          make

      - name:  Install and setup Linux packages
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -qq update
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib
            echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          else
            sudo apt-get install -y clang-${{ matrix.version }} g++-multilib
            echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
          fi
          sudo apt-get install -y libhiredis-dev autoconf automake autopoint redis-tools redis-server
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y -s ppa:nerdboy/embedded
          sudo apt-get install -y libjson-c-dev

      - name:  Install and setup MacOS packages
        if: runner.os == 'macOS'
        run: |
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            brew install gcc@${{ matrix.version }}
            export "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            export "CCC=g++-${{ matrix.version }}" >> $GITHUB_ENV
          else
            ls -ls /Applications/
            sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app
            export "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
            export "CCC=clang++-${{ matrix.version }}" >> $GITHUB_ENV
          fi
          brew install json-c hiredis libtool redis

      - name: Configure
        run: |
          ./autogen.sh

      - name: Message bus
        run: |
          mkdir -p /tmp/redis-ipc
          redis-server --port 0 --pidfile /run/redis.pid --unixsocket /tmp/redis-ipc/socket --unixsocketperm 600 &

      - name: Build
        run: |
          make

      - name: Test
        run: |
          make check
